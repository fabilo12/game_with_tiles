{"ast":null,"code":"export default function selectTileTarget(state, payload) {\n  const newState = { ...state\n  };\n  drawn = newState.repos[newState.selectedTiles.repo].filter(el => el === newState.selectedTiles.color);\n  rest = newState.repos[newState.selectedTiles.repo].filter(el => el !== newState.selectedTiles.color); //payload.color;\n  //payload.row;\n\n  /*\n  newState.selectedTiles.repo = payload.repo;\n  newState.selectedTiles.color = payload.color;*/\n\n  return newState;\n}\n\nfunction checkTargetValidity(selectedColor, targetColor, wall) {}\n/*if (newState.drawn.length > 0) {\n\tif (payload.repo === 'middle') {\n\t\tnewState[payload.repo] = Array(newState.nColors).fill(0);\n\t\tif (newState.startingTile === 'middle') {\n\t\t\tnewState.startingTile = newState.playerAtTurn;\n\t\t}\n\t} else {\n\t\tnewState.middle = addArrays(newState.middle, tileColToDist(tiles.filter(c => c !== color)));\n\t\tnewState[payload.repo] = [];\n\t}\n\treturn newState;\n} else {\n\talert(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n}*/","map":{"version":3,"names":["selectTileTarget","state","payload","newState","drawn","repos","selectedTiles","repo","filter","el","color","rest","checkTargetValidity","selectedColor","targetColor","wall"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducer/selectTileTarget.js"],"sourcesContent":["export default function selectTileTarget(state, payload) {\n\n\tconst newState = { ...state };\n\n\tdrawn = newState.repos[newState.selectedTiles.repo].filter(el => el===newState.selectedTiles.color);\n\trest = newState.repos[newState.selectedTiles.repo].filter(el => el!==newState.selectedTiles.color);\n\n\n\t//payload.color;\n\t//payload.row;\n\n\t/*\n\tnewState.selectedTiles.repo = payload.repo;\n\tnewState.selectedTiles.color = payload.color;*/\n\t\n\treturn newState\n}\n\n\nfunction checkTargetValidity(selectedColor,targetColor,wall) {\n\n}\n\n/*if (newState.drawn.length > 0) {\n\tif (payload.repo === 'middle') {\n\t\tnewState[payload.repo] = Array(newState.nColors).fill(0);\n\t\tif (newState.startingTile === 'middle') {\n\t\t\tnewState.startingTile = newState.playerAtTurn;\n\t\t}\n\t} else {\n\t\tnewState.middle = addArrays(newState.middle, tileColToDist(tiles.filter(c => c !== color)));\n\t\tnewState[payload.repo] = [];\n\t}\n\treturn newState;\n} else {\n\talert(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n}*/"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;EAExD,MAAMC,QAAQ,GAAG,EAAE,GAAGF;EAAL,CAAjB;EAEAG,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAeF,QAAQ,CAACG,aAAT,CAAuBC,IAAtC,EAA4CC,MAA5C,CAAmDC,EAAE,IAAIA,EAAE,KAAGN,QAAQ,CAACG,aAAT,CAAuBI,KAArF,CAAR;EACAC,IAAI,GAAGR,QAAQ,CAACE,KAAT,CAAeF,QAAQ,CAACG,aAAT,CAAuBC,IAAtC,EAA4CC,MAA5C,CAAmDC,EAAE,IAAIA,EAAE,KAAGN,QAAQ,CAACG,aAAT,CAAuBI,KAArF,CAAP,CALwD,CAQxD;EACA;;EAEA;AACD;AACA;;EAEC,OAAOP,QAAP;AACA;;AAGD,SAASS,mBAAT,CAA6BC,aAA7B,EAA2CC,WAA3C,EAAuDC,IAAvD,EAA6D,CAE5D;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}