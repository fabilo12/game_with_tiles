{"ast":null,"code":"import addArrays from '../js_utils/addArrays.js';\nimport tileColToDist from '../azul_lib/tileColToDist.js';\nexport default function putTilesIntoRow(state, payload) {\n  let newState = { ...state\n  };\n  const drawn = newState.repos[newState.selectedTiles.repo].filter(el => el === newState.selectedTiles.color);\n  const rest = tileColToDist(newState.repos[newState.selectedTiles.repo].filter(el => el !== newState.selectedTiles.color), newState.nColor);\n  const targetRow = newState.rows[newState.playerAtTurn][payload.row]; //const newTargetRow = processDrawnTiles(newState, drawn, targetRow);\n\n  newState = processDrawnTiles(newState, drawn, targetRow);\n  /*newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n  newState.penalties[newState.playerAtTurn] = addArrays(\n  \tnewState.penalties[newState.playerAtTurn],\n  \tnewTargetRow.penalties\n  );*/\n  //newState.middle = addArrays(newState.middle, rest);\n\n  newState = putRestToMiddle(newState, rest);\n  /*newState.repos[newState.selectedTiles.repo] = \n  \tArray(newState.tilesPerRepo).fill(newState.emptyTileField);*/\n\n  newState = goToNextPlayer(newState);\n  return newState;\n}\n\nfunction processDrawnTiles(state, drawn, targetRow) {\n  let newState = { ...state\n  };\n  const nTileInRow = targetRow.filter(el => el === drawn[0]).length;\n  const nDrawn = drawn.length;\n  const auxFilled = Array(Math.min(nTileInRow + nDrawn, targetRow.length)).fill(drawn[0]);\n  const auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n  return {\n    newRow: auxFilled.concat(auxEmpty),\n    penalties: tileColToDist(Array(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), state.nColor)\n  };\n  newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n  newState.penalties[newState.playerAtTurn] = addArrays(newState.penalties[newState.playerAtTurn], newTargetRow.penalties);\n  return newState;\n}\n\nfunction putRestToMiddle(state, rest) {\n  let newState = { ...state\n  };\n  newState.middle = addArrays(newState.middle, rest);\n  return newState;\n}\n\nfunction emptyRepo(state, repo) {\n  let newState = { ...state\n  };\n  newState.repos[newState.selectedTiles.repo] = Array(newState.tilesPerRepo).fill(newState.emptyTileField);\n  return newState;\n}\n\nfunction goToNextPlayer(state) {\n  const newState = { ...state\n  };\n  newState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n  return newState;\n}","map":{"version":3,"names":["addArrays","tileColToDist","putTilesIntoRow","state","payload","newState","drawn","repos","selectedTiles","repo","filter","el","color","rest","nColor","targetRow","rows","playerAtTurn","row","processDrawnTiles","putRestToMiddle","goToNextPlayer","nTileInRow","length","nDrawn","auxFilled","Array","Math","min","fill","auxEmpty","emptyTileField","newRow","concat","penalties","max","newTargetRow","middle","emptyRepo","tilesPerRepo","nPlayer"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducer/putTilesIntoRow.js"],"sourcesContent":["import addArrays from '../js_utils/addArrays.js'\nimport tileColToDist from '../azul_lib/tileColToDist.js'\n\nexport default function putTilesIntoRow(state, payload) {\n\n\tlet newState = { ...state };\n\n\tconst drawn = newState.repos[newState.selectedTiles.repo].filter(\n\t\tel => el===newState.selectedTiles.color\n\t);\n\tconst rest = tileColToDist(\n\t\tnewState.repos[newState.selectedTiles.repo].filter(\n\t\t\tel => el!==newState.selectedTiles.color\n\t\t), \n\t\tnewState.nColor\n\t);\n\tconst targetRow = newState.rows[newState.playerAtTurn][payload.row];\n\n\t//const newTargetRow = processDrawnTiles(newState, drawn, targetRow);\n\tnewState = processDrawnTiles(newState, drawn, targetRow);\n\t\n\t/*newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n\tnewState.penalties[newState.playerAtTurn] = addArrays(\n\t\tnewState.penalties[newState.playerAtTurn],\n\t\tnewTargetRow.penalties\n\t);*/\n\t\n\t//newState.middle = addArrays(newState.middle, rest);\n\tnewState = putRestToMiddle(newState, rest);\n\t/*newState.repos[newState.selectedTiles.repo] = \n\t\tArray(newState.tilesPerRepo).fill(newState.emptyTileField);*/\n\n\tnewState = goToNextPlayer(newState);\n\n\treturn newState\n}\n\nfunction processDrawnTiles(state, drawn, targetRow) {\n\n\tlet newState = { ...state };\n\n\tconst nTileInRow = targetRow.filter(el => el===drawn[0]).length;\n\tconst nDrawn = drawn.length;\n\tconst auxFilled = Array(Math.min(nTileInRow + nDrawn,targetRow.length)).fill(drawn[0]);\n\tconst auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n\treturn {\n\t\tnewRow: auxFilled.concat(auxEmpty),\n\t\tpenalties: tileColToDist(\n\t\t\tArray(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), \n\t\t\tstate.nColor\n\t\t\t),\n\t}\n\n\tnewState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n\tnewState.penalties[newState.playerAtTurn] = addArrays(\n\t\tnewState.penalties[newState.playerAtTurn],\n\t\tnewTargetRow.penalties\n\t);\n\n\treturn newState\n}\n\nfunction putRestToMiddle(state,rest) {\n\n\tlet newState = { ...state };\n\n\tnewState.middle = addArrays(newState.middle, rest);\n\n\treturn newState\n}\n\nfunction emptyRepo(state, repo) {\n\t\n\tlet newState = { ...state };\n\n\tnewState.repos[newState.selectedTiles.repo] = \n\t\tArray(newState.tilesPerRepo).fill(newState.emptyTileField);\n\t\n\treturn newState\n}\n\nfunction goToNextPlayer(state) {\n\n\tconst newState = { ...state };\n\n\tnewState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n\n\treturn newState\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}