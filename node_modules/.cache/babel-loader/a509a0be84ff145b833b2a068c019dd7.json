{"ast":null,"code":"import { tileColl, tileDist, addArrays } from './utils.js';\nexport function drawTiles(state, payload) {\n  const color = payload.color;\n  const tiles = payload.repo === 'middle' ? tileColl(state.middle) : state.repos[payload.repo];\n  const newState = { ...state\n  };\n\n  if (tiles[color] > 0) {\n    newState.drawn = tiles.filter(c => c === color);\n\n    if (payload.repo === 'middle') {\n      newState[payload.repo] = Array(newState.nColors).fill(0);\n\n      if (newState.startingTile === 'middle') {\n        newState.startingTile = newState.playerAtTurn;\n      }\n    } else {\n      newState.middle = addArrays(newState.middle, tileDist(tiles.filter(c => c !== color)));\n      newState[payload.repo] = [];\n    }\n    /*if (!drawnColor.allOfOne) {\n    \tconsole.log(\"Detected more than one color.\")\n    }\n    if (drawnColor.color === -1) {\n    \tconsole.log(\"No color was drawn.\")\n    }*/\n\n\n    return newState;\n  } else {\n    //TODO: Think about what should happen here\n    throw new Error(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n  }\n}","map":{"version":3,"names":["tileColl","tileDist","addArrays","drawTiles","state","payload","color","tiles","repo","middle","repos","newState","drawn","filter","c","Array","nColors","fill","startingTile","playerAtTurn","Error","toString"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducerFunctions.js"],"sourcesContent":["import {tileColl, tileDist, addArrays} from './utils.js'\n\nexport function drawTiles(state, payload) {\n\t\n\tconst color = payload.color;\n\tconst tiles = payload.repo==='middle' ? tileColl(state.middle) : state.repos[payload.repo];\n\n\tconst newState = {...state};\n\n\tif (tiles[color] > 0) {\n\t\tnewState.drawn = tiles.filter(c => c===color);\n\t\tif (payload.repo === 'middle') {\n\t\t\tnewState[payload.repo] = Array(newState.nColors).fill(0);\n\t\t\tif (newState.startingTile === 'middle') {\n\t\t\t\tnewState.startingTile = newState.playerAtTurn;\n\t\t\t}\n\t\t} else {\n\t\t\tnewState.middle = addArrays(newState.middle, tileDist(tiles.filter(c => c !== color)));\n\t\t\tnewState[payload.repo] = [];\n\t\t}\n\t\t/*if (!drawnColor.allOfOne) {\n\t\t\tconsole.log(\"Detected more than one color.\")\n\t\t}\n\t\tif (drawnColor.color === -1) {\n\t\t\tconsole.log(\"No color was drawn.\")\n\t\t}*/\n\t\treturn newState;\n\t} else {\n\t\t//TODO: Think about what should happen here\n\t\tthrow new Error(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n\t}\n}"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,QAAlB,EAA4BC,SAA5B,QAA4C,YAA5C;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;EAEzC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAtB;EACA,MAAMC,KAAK,GAAGF,OAAO,CAACG,IAAR,KAAe,QAAf,GAA0BR,QAAQ,CAACI,KAAK,CAACK,MAAP,CAAlC,GAAmDL,KAAK,CAACM,KAAN,CAAYL,OAAO,CAACG,IAApB,CAAjE;EAEA,MAAMG,QAAQ,GAAG,EAAC,GAAGP;EAAJ,CAAjB;;EAEA,IAAIG,KAAK,CAACD,KAAD,CAAL,GAAe,CAAnB,EAAsB;IACrBK,QAAQ,CAACC,KAAT,GAAiBL,KAAK,CAACM,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAGR,KAAtB,CAAjB;;IACA,IAAID,OAAO,CAACG,IAAR,KAAiB,QAArB,EAA+B;MAC9BG,QAAQ,CAACN,OAAO,CAACG,IAAT,CAAR,GAAyBO,KAAK,CAACJ,QAAQ,CAACK,OAAV,CAAL,CAAwBC,IAAxB,CAA6B,CAA7B,CAAzB;;MACA,IAAIN,QAAQ,CAACO,YAAT,KAA0B,QAA9B,EAAwC;QACvCP,QAAQ,CAACO,YAAT,GAAwBP,QAAQ,CAACQ,YAAjC;MACA;IACD,CALD,MAKO;MACNR,QAAQ,CAACF,MAAT,GAAkBP,SAAS,CAACS,QAAQ,CAACF,MAAV,EAAkBR,QAAQ,CAACM,KAAK,CAACM,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAKR,KAAxB,CAAD,CAA1B,CAA3B;MACAK,QAAQ,CAACN,OAAO,CAACG,IAAT,CAAR,GAAyB,EAAzB;IACA;IACD;AACF;AACA;AACA;AACA;AACA;;;IACE,OAAOG,QAAP;EACA,CAlBD,MAkBO;IACN;IACA,MAAM,IAAIS,KAAJ,CAAUf,OAAO,CAACG,IAAR,GAAe,6BAAf,GAA+CF,KAAK,CAACe,QAAN,EAA/C,GAAkE,GAA5E,CAAN;EACA;AACD"},"metadata":{},"sourceType":"module"}