{"ast":null,"code":"import { tileColl, tileDist, addArrays } from './utils.js';\nexport function drawTiles(state, payload) {\n  const color = payload.color;\n  console.log(payload);\n  console.log(tileColl(state.middle));\n  console.log(state.repos[payload.repo]);\n  const tiles = payload.repo === 'middle' ? tileColl(state.middle) : state.repos[payload.repo];\n  const newState = { ...state\n  };\n  newState.drawn = tiles.filter(c => c === color);\n\n  if (newState.drawn.length > 0) {\n    if (payload.repo === 'middle') {\n      newState[payload.repo] = Array(newState.nColors).fill(0);\n\n      if (newState.startingTile === 'middle') {\n        newState.startingTile = newState.playerAtTurn;\n      }\n    } else {\n      newState.middle = addArrays(newState.middle, tileDist(tiles.filter(c => c !== color)));\n      newState[payload.repo] = [];\n    }\n\n    return newState;\n  } else {\n    alert(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n  }\n}","map":{"version":3,"names":["tileColl","tileDist","addArrays","drawTiles","state","payload","color","console","log","middle","repos","repo","tiles","newState","drawn","filter","c","length","Array","nColors","fill","startingTile","playerAtTurn","alert","toString"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducerFunctions.js"],"sourcesContent":["import { tileColl, tileDist, addArrays } from './utils.js'\n\nexport function drawTiles(state, payload) {\n\n\tconst color = payload.color;\n\tconsole.log(payload)\n\tconsole.log(tileColl(state.middle))\n\tconsole.log(state.repos[payload.repo])\n\tconst tiles = (payload.repo === 'middle') ? tileColl(state.middle) : state.repos[payload.repo];\n\n\tconst newState = { ...state };\n\n\tnewState.drawn = tiles.filter(c => c === color);\n\n\tif (newState.drawn.length > 0) {\n\t\tif (payload.repo === 'middle') {\n\t\t\tnewState[payload.repo] = Array(newState.nColors).fill(0);\n\t\t\tif (newState.startingTile === 'middle') {\n\t\t\t\tnewState.startingTile = newState.playerAtTurn;\n\t\t\t}\n\t\t} else {\n\t\t\tnewState.middle = addArrays(newState.middle, tileDist(tiles.filter(c => c !== color)));\n\t\t\tnewState[payload.repo] = [];\n\t\t}\n\t\treturn newState;\n\t} else {\n\t\talert(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n\t}\n}"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,YAA9C;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;EAEzC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAtB;EACAC,OAAO,CAACC,GAAR,CAAYH,OAAZ;EACAE,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACI,KAAK,CAACK,MAAP,CAApB;EACAF,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACM,KAAN,CAAYL,OAAO,CAACM,IAApB,CAAZ;EACA,MAAMC,KAAK,GAAIP,OAAO,CAACM,IAAR,KAAiB,QAAlB,GAA8BX,QAAQ,CAACI,KAAK,CAACK,MAAP,CAAtC,GAAuDL,KAAK,CAACM,KAAN,CAAYL,OAAO,CAACM,IAApB,CAArE;EAEA,MAAME,QAAQ,GAAG,EAAE,GAAGT;EAAL,CAAjB;EAEAS,QAAQ,CAACC,KAAT,GAAiBF,KAAK,CAACG,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAKV,KAAxB,CAAjB;;EAEA,IAAIO,QAAQ,CAACC,KAAT,CAAeG,MAAf,GAAwB,CAA5B,EAA+B;IAC9B,IAAIZ,OAAO,CAACM,IAAR,KAAiB,QAArB,EAA+B;MAC9BE,QAAQ,CAACR,OAAO,CAACM,IAAT,CAAR,GAAyBO,KAAK,CAACL,QAAQ,CAACM,OAAV,CAAL,CAAwBC,IAAxB,CAA6B,CAA7B,CAAzB;;MACA,IAAIP,QAAQ,CAACQ,YAAT,KAA0B,QAA9B,EAAwC;QACvCR,QAAQ,CAACQ,YAAT,GAAwBR,QAAQ,CAACS,YAAjC;MACA;IACD,CALD,MAKO;MACNT,QAAQ,CAACJ,MAAT,GAAkBP,SAAS,CAACW,QAAQ,CAACJ,MAAV,EAAkBR,QAAQ,CAACW,KAAK,CAACG,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAKV,KAAxB,CAAD,CAA1B,CAA3B;MACAO,QAAQ,CAACR,OAAO,CAACM,IAAT,CAAR,GAAyB,EAAzB;IACA;;IACD,OAAOE,QAAP;EACA,CAXD,MAWO;IACNU,KAAK,CAAClB,OAAO,CAACM,IAAR,GAAe,6BAAf,GAA+CL,KAAK,CAACkB,QAAN,EAA/C,GAAkE,GAAnE,CAAL;EACA;AACD"},"metadata":{},"sourceType":"module"}