{"ast":null,"code":"import './utils.js';\nexport function drawTiles(state, payload) {\n  const player = payload.player;\n  const color = payload.color;\n  const tileDist = payload.repo === 'middle' ? state.middle[player] : tileDist(state[payload.repo]);\n\n  if (state[repo][color] > 0) {\n    state[player].drawn = Array(NUM_COLORS).fill(0);\n    state[player].drawn[color] = state[repo][color];\n    state[repo][color] = 0;\n\n    if (repo === \"middle\") {\n      if (state.startingTile === \"middle\") {\n        state.startingTile = player;\n      }\n    } else {\n      state.middle = add(state.middle, state[repo]);\n      state[repo] = Array(NUM_COLORS).fill(0);\n    }\n\n    let drawnColor = allOfOneColor(state[player].drawn);\n\n    if (!drawnColor.allOfOne) {\n      console.log(\"Detected more than one color.\");\n    }\n\n    if (drawnColor.color === -1) {\n      console.log(\"No color was drawn.\");\n    }\n\n    return state;\n  } else {\n    //TODO: Think about what should happen here\n    throw new Error(repo + \" contains no tile of color \" + color.toString() + \"!\");\n  }\n}","map":{"version":3,"names":["drawTiles","state","payload","player","color","tileDist","repo","middle","drawn","Array","NUM_COLORS","fill","startingTile","add","drawnColor","allOfOneColor","allOfOne","console","log","Error","toString"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducerFunctions.js"],"sourcesContent":["import {} from './utils.js'\n\nexport function drawTiles(state, payload) {\n\t\n\tconst player = payload.player;\n\tconst color = payload.color;\n\tconst tileDist = payload.repo==='middle'\n\t? state.middle[player]\n\t: tileDist(state[payload.repo]);\n\n\tif (state[repo][color] > 0) {\n\t\tstate[player].drawn = Array(NUM_COLORS).fill(0);\n\t\tstate[player].drawn[color] = state[repo][color];\n\t\tstate[repo][color] = 0;\n\t\tif (repo === \"middle\") {\n\t\t\tif (state.startingTile === \"middle\") {\n\t\t\t\tstate.startingTile = player;\n\t\t\t}\n\t\t} else {\n\t\t\tstate.middle = add(state.middle, state[repo]);\n\t\t\tstate[repo] = Array(NUM_COLORS).fill(0);\n\t\t}\n\t\tlet drawnColor = allOfOneColor(state[player].drawn);\n\t\tif (!drawnColor.allOfOne) {\n\t\t\tconsole.log(\"Detected more than one color.\")\n\t\t}\n\t\tif (drawnColor.color === -1) {\n\t\t\tconsole.log(\"No color was drawn.\")\n\t\t}\n\t\treturn state;\n\t} else {\n\t\t//TODO: Think about what should happen here\n\t\tthrow new Error(repo + \" contains no tile of color \" + color.toString() + \"!\");\n\t}\n}"],"mappings":"AAAA,OAAe,YAAf;AAEA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;EAEzC,MAAMC,MAAM,GAAGD,OAAO,CAACC,MAAvB;EACA,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAtB;EACA,MAAMC,QAAQ,GAAGH,OAAO,CAACI,IAAR,KAAe,QAAf,GACfL,KAAK,CAACM,MAAN,CAAaJ,MAAb,CADe,GAEfE,QAAQ,CAACJ,KAAK,CAACC,OAAO,CAACI,IAAT,CAAN,CAFV;;EAIA,IAAIL,KAAK,CAACK,IAAD,CAAL,CAAYF,KAAZ,IAAqB,CAAzB,EAA4B;IAC3BH,KAAK,CAACE,MAAD,CAAL,CAAcK,KAAd,GAAsBC,KAAK,CAACC,UAAD,CAAL,CAAkBC,IAAlB,CAAuB,CAAvB,CAAtB;IACAV,KAAK,CAACE,MAAD,CAAL,CAAcK,KAAd,CAAoBJ,KAApB,IAA6BH,KAAK,CAACK,IAAD,CAAL,CAAYF,KAAZ,CAA7B;IACAH,KAAK,CAACK,IAAD,CAAL,CAAYF,KAAZ,IAAqB,CAArB;;IACA,IAAIE,IAAI,KAAK,QAAb,EAAuB;MACtB,IAAIL,KAAK,CAACW,YAAN,KAAuB,QAA3B,EAAqC;QACpCX,KAAK,CAACW,YAAN,GAAqBT,MAArB;MACA;IACD,CAJD,MAIO;MACNF,KAAK,CAACM,MAAN,GAAeM,GAAG,CAACZ,KAAK,CAACM,MAAP,EAAeN,KAAK,CAACK,IAAD,CAApB,CAAlB;MACAL,KAAK,CAACK,IAAD,CAAL,GAAcG,KAAK,CAACC,UAAD,CAAL,CAAkBC,IAAlB,CAAuB,CAAvB,CAAd;IACA;;IACD,IAAIG,UAAU,GAAGC,aAAa,CAACd,KAAK,CAACE,MAAD,CAAL,CAAcK,KAAf,CAA9B;;IACA,IAAI,CAACM,UAAU,CAACE,QAAhB,EAA0B;MACzBC,OAAO,CAACC,GAAR,CAAY,+BAAZ;IACA;;IACD,IAAIJ,UAAU,CAACV,KAAX,KAAqB,CAAC,CAA1B,EAA6B;MAC5Ba,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACA;;IACD,OAAOjB,KAAP;EACA,CApBD,MAoBO;IACN;IACA,MAAM,IAAIkB,KAAJ,CAAUb,IAAI,GAAG,6BAAP,GAAuCF,KAAK,CAACgB,QAAN,EAAvC,GAA0D,GAApE,CAAN;EACA;AACD"},"metadata":{},"sourceType":"module"}