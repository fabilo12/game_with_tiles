{"ast":null,"code":"import addArrays from '../js_utils/addArrays.js';\nimport tileColToDist from '../azul_lib/tileColToDist.js';\nexport default function putTilesIntoRow(state, payload) {\n  let newState = { ...state\n  };\n  /*const drawn = newState.repos[newState.selectedTiles.repo].filter(\n  \tel => el===newState.selectedTiles.color\n  );\n  const rest = tileColToDist(\n  \tnewState.repos[newState.selectedTiles.repo].filter(\n  \t\tel => el!==newState.selectedTiles.color\n  \t), \n  \tnewState.nColor\n  );*/\n  //const targetRow = newState.rows[newState.playerAtTurn][payload.row];\n  //const newTargetRow = processDrawnTiles(newState, drawn, targetRow);\n\n  newState = processDrawnTiles(newState, payload);\n  /*newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n  newState.penalties[newState.playerAtTurn] = addArrays(\n  \tnewState.penalties[newState.playerAtTurn],\n  \tnewTargetRow.penalties\n  );*/\n  //newState.middle = addArrays(newState.middle, rest);\n\n  newState = putRestToMiddle(newState);\n  /*newState.repos[newState.selectedTiles.repo] = \n  \tArray(newState.tilesPerRepo).fill(newState.emptyTileField);*/\n\n  newState = emptyRepo(newState);\n  newState = deleteSelectedTiles(newState);\n  newState = goToNextPlayer(newState);\n  return newState;\n}\n\nfunction processDrawnTiles(state, payload) {\n  const newState = { ...state\n  };\n  const drawn = newState.repos[newState.selectedTiles.repo].filter(el => el === newState.selectedTiles.color);\n  const targetRow = newState.rows[newState.playerAtTurn][payload.row];\n  const nTileInRow = targetRow.filter(el => el === drawn[0]).length;\n  const nDrawn = drawn.length;\n  const auxFilled = Array(Math.min(nTileInRow + nDrawn, targetRow.length)).fill(drawn[0]);\n  const auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n  newState.rows[newState.playerAtTurn][payload.row] = auxFilled.concat(auxEmpty);\n  newState.penalties[newState.playerAtTurn] = addArrays(newState.penalties[newState.playerAtTurn], tileColToDist(Array(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), state.nColor));\n  return newState;\n}\n\nfunction putRestToMiddle(state) {\n  const newState = { ...state\n  };\n  const rest = tileColToDist(newState.repos[newState.selectedTiles.repo].filter(el => el !== newState.selectedTiles.color), newState.nColor);\n  newState.middle = addArrays(newState.middle, rest);\n  return newState;\n}\n\nfunction emptyRepo(state) {\n  const newState = { ...state\n  };\n  newState.repos[newState.selectedTiles.repo] = Array(newState.tilesPerRepo).fill(newState.emptyTileField);\n  return newState;\n}\n\nfunction deleteSelectedTiles(state) {\n  const newState = { ...state\n  };\n  delete newState.selectedTiles;\n  return newState;\n}\n\nfunction goToNextPlayer(state) {\n  const newState = { ...state\n  };\n  newState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n  return newState;\n}","map":{"version":3,"names":["addArrays","tileColToDist","putTilesIntoRow","state","payload","newState","processDrawnTiles","putRestToMiddle","emptyRepo","deleteSelectedTiles","goToNextPlayer","drawn","repos","selectedTiles","repo","filter","el","color","targetRow","rows","playerAtTurn","row","nTileInRow","length","nDrawn","auxFilled","Array","Math","min","fill","auxEmpty","emptyTileField","concat","penalties","max","nColor","rest","middle","tilesPerRepo","nPlayer"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducer/putTilesIntoRow.js"],"sourcesContent":["import addArrays from '../js_utils/addArrays.js'\nimport tileColToDist from '../azul_lib/tileColToDist.js'\n\nexport default function putTilesIntoRow(state, payload) {\n\n\tlet newState = { ...state };\n\n\t/*const drawn = newState.repos[newState.selectedTiles.repo].filter(\n\t\tel => el===newState.selectedTiles.color\n\t);\n\tconst rest = tileColToDist(\n\t\tnewState.repos[newState.selectedTiles.repo].filter(\n\t\t\tel => el!==newState.selectedTiles.color\n\t\t), \n\t\tnewState.nColor\n\t);*/\n\t//const targetRow = newState.rows[newState.playerAtTurn][payload.row];\n\n\t//const newTargetRow = processDrawnTiles(newState, drawn, targetRow);\n\tnewState = processDrawnTiles(newState, payload);\n\t\n\t/*newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n\tnewState.penalties[newState.playerAtTurn] = addArrays(\n\t\tnewState.penalties[newState.playerAtTurn],\n\t\tnewTargetRow.penalties\n\t);*/\n\t\n\t//newState.middle = addArrays(newState.middle, rest);\n\tnewState = putRestToMiddle(newState);\n\t/*newState.repos[newState.selectedTiles.repo] = \n\t\tArray(newState.tilesPerRepo).fill(newState.emptyTileField);*/\n\tnewState = emptyRepo(newState);\n\n\tnewState = deleteSelectedTiles(newState);\n\n\tnewState = goToNextPlayer(newState);\n\n\treturn newState\n}\n\nfunction processDrawnTiles(state, payload) {\n\n\tconst newState = { ...state };\n\n\tconst drawn = newState.repos[newState.selectedTiles.repo].filter(\n\t\tel => el===newState.selectedTiles.color\n\t);\n\tconst targetRow = newState.rows[newState.playerAtTurn][payload.row];\n\tconst nTileInRow = targetRow.filter(el => el===drawn[0]).length;\n\tconst nDrawn = drawn.length;\n\tconst auxFilled = Array(Math.min(nTileInRow + nDrawn, targetRow.length)).fill(drawn[0]);\n\tconst auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n\tnewState.rows[newState.playerAtTurn][payload.row] = auxFilled.concat(auxEmpty);\n\tnewState.penalties[newState.playerAtTurn] = addArrays(\n\t\tnewState.penalties[newState.playerAtTurn],\n\t\ttileColToDist(\n\t\t\tArray(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), \n\t\t\tstate.nColor\n\t\t)\n\t);\n\n\treturn newState\n}\n\nfunction putRestToMiddle(state) {\n\n\tconst newState = { ...state };\n\n\tconst rest = tileColToDist(\n\t\tnewState.repos[newState.selectedTiles.repo].filter(\n\t\t\tel => el!==newState.selectedTiles.color\n\t\t), \n\t\tnewState.nColor\n\t);\n\tnewState.middle = addArrays(newState.middle, rest);\n\n\treturn newState\n}\n\nfunction emptyRepo(state) {\n\t\n\tconst newState = { ...state };\n\n\tnewState.repos[newState.selectedTiles.repo] = \n\t\tArray(newState.tilesPerRepo).fill(newState.emptyTileField);\n\t\n\treturn newState\n}\n\nfunction deleteSelectedTiles(state) {\n\n\tconst newState = { ...state };\n\n\tdelete newState.selectedTiles;\n\t\n\treturn newState\n}\n\nfunction goToNextPlayer(state) {\n\n\tconst newState = { ...state };\n\n\tnewState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n\n\treturn newState\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}