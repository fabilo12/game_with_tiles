{"ast":null,"code":"import getRandomInt from '../js_utils/getRandomInt.js';\nimport fillRepos from './fillRepos.js'; //TODO: fetch these from landing page input\n\nconst TILES_PER_REPO = 4;\nconst N_COLORS = 5;\nconst TILES_PER_COLOR = 20;\nconst EMPTY_TILE_FIELD = -1; //const PLAYER_LIST = ['player1', 'player2', 'player3', 'player4'];\n\nconst PLAYER_LIST = ['player1', 'player2'];\nexport default function gameState(N_COLORS, TILES_PER_REPO, TILES_PER_COLOR, EMPTY_TILE_FIELD, PLAYER_LIST) {\n  //game hyperparameters\n  const nPlayer = PLAYER_LIST.length;\n  const nRepos = 2 * nPlayer + 1;\n  this.nColor = N_COLORS;\n  this.tilesPerRepo = TILES_PER_REPO;\n  this.tilesPerColor = TILES_PER_COLOR;\n  this.emptyTileField = EMPTY_TILE_FIELD;\n  this.playerList = PLAYER_LIST; //player specific state\n\n  this.nPlayer = nPlayer;\n  this.scores = Array(nPlayer).fill(0);\n  this.rows = Array(nPlayer).fill().map(_ => Array.from(Array(N_COLORS), (_, i) => Array(i + 1).fill(EMPTY_TILE_FIELD)));\n  this.wall = Array(nPlayer).fill().map(_ => Array.from(Array(N_COLORS), _ => Array(N_COLORS).fill(EMPTY_TILE_FIELD)));\n  this.penalties = Array(nPlayer).fill().map(_ => []); //state shared between players\n\n  this.isGameOver = false;\n  this.nRepos = nRepos;\n  this.bag = Array.from(Array(N_COLORS), (_, i) => Array(TILES_PER_COLOR).fill(i)).flat();\n  this.usedTiles = [];\n  this.repos = Array(nRepos).fill().map(_ => Array(TILES_PER_REPO).fill(EMPTY_TILE_FIELD));\n  this.repos[this.nRepos] = []; //last repo is 'the middle', initially empty;\n\n  this.startingTile = 'middle';\n  this.playerAtTurn = getRandomInt(0, nPlayer)[0];\n  this.playMode = \"predefined\";\n  this.wallPattern = Array.from(Array(N_COLORS), (_, j) => Array.from(Array(N_COLORS), (_, i) => (N_COLORS - i + j) % N_COLORS));\n}\n;","map":{"version":3,"names":["getRandomInt","fillRepos","TILES_PER_REPO","N_COLORS","TILES_PER_COLOR","EMPTY_TILE_FIELD","PLAYER_LIST","gameState","nPlayer","length","nRepos","nColor","tilesPerRepo","tilesPerColor","emptyTileField","playerList","scores","Array","fill","rows","map","_","from","i","wall","penalties","isGameOver","bag","flat","usedTiles","repos","startingTile","playerAtTurn","playMode","wallPattern","j"],"sources":["/home/lorenz/programming/azul_create_react_app/src/azul_lib/gameState.js"],"sourcesContent":["import getRandomInt from '../js_utils/getRandomInt.js';\nimport fillRepos from './fillRepos.js'\n\n//TODO: fetch these from landing page input\nconst TILES_PER_REPO = 4;\nconst N_COLORS = 5;\nconst TILES_PER_COLOR = 20;\nconst EMPTY_TILE_FIELD = -1;\n//const PLAYER_LIST = ['player1', 'player2', 'player3', 'player4'];\nconst PLAYER_LIST = ['player1', 'player2'];\n\n\nexport default \n\nfunction gameState(\n\tN_COLORS,\n\tTILES_PER_REPO,\n\tTILES_PER_COLOR,\n\tEMPTY_TILE_FIELD,\n\tPLAYER_LIST\n) {\n\t//game hyperparameters\n\tconst nPlayer = PLAYER_LIST.length;\n\tconst nRepos = 2 * nPlayer + 1;\n\tthis.nColor = N_COLORS;\n\tthis.tilesPerRepo = TILES_PER_REPO;\n\tthis.tilesPerColor = TILES_PER_COLOR;\n\tthis.emptyTileField = EMPTY_TILE_FIELD;\n\tthis.playerList = PLAYER_LIST;\n\n\t//player specific state\n\tthis.nPlayer = nPlayer;\n\tthis.scores = Array(nPlayer).fill(0);\n\tthis.rows = Array(nPlayer).fill().map(\n\t\t_ => Array.from(\n\t\t\tArray(N_COLORS), (_, i) => Array(i + 1).fill(EMPTY_TILE_FIELD)\n\t\t)\n\t);\n\tthis.wall = Array(nPlayer).fill().map(\n\t\t_ => Array.from(\n\t\t\tArray(N_COLORS), _ => Array(N_COLORS).fill(EMPTY_TILE_FIELD)\n\t\t)\n\t);\n\tthis.penalties = Array(nPlayer).fill().map(_ => []);\n\n\t//state shared between players\n\tthis.isGameOver = false;\n\tthis.nRepos = nRepos;\n\tthis.bag = Array.from(\n\t\tArray(N_COLORS), (_, i) => Array(TILES_PER_COLOR).fill(i)\n\t).flat();\n\tthis.usedTiles = [];\n\tthis.repos = Array(nRepos).fill().map(\n\t\t_ => Array(TILES_PER_REPO).fill(EMPTY_TILE_FIELD)\n\t);\n\tthis.repos[this.nRepos] = [];//last repo is 'the middle', initially empty;\n\n\tthis.startingTile = 'middle';\n\tthis.playerAtTurn = getRandomInt(0, nPlayer)[0];\n\tthis.playMode = \"predefined\";\n\tthis.wallPattern = Array.from(\n\t\tArray(N_COLORS),\n\t\t(_, j) => Array.from(\n\t\t\tArray(N_COLORS),\n\t\t\t(_, i) => (N_COLORS - i + j) % N_COLORS\n\t\t)\n\t);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}