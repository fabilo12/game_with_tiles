{"ast":null,"code":"import { tileColl, addArrays } from './utils.js';\nexport function drawTiles(state, payload) {\n  const player = payload.player;\n  const color = payload.color;\n  const tiles = payload.repo === 'middle' ? tileColl(state.middle[player]) : state[payload.repo];\n  const newState = { ...state\n  };\n\n  if (tiles[color] > 0) {\n    newState.drawn = tiles.filter(c => c === color);\n    newState[payload.repo] = [];\n\n    if (payload.repo === 'middle') {\n      if (state.startingTile === 'middle') {\n        state.startingTile = player;\n      }\n    } else {\n      state.middle = addArrays(state.middle, tiles.filter(c => c !== color)); //tiles = Array(newState.nColors).fill(0);\n    }\n    /*let drawnColor = allOfOneColor(state[player].drawn);\n    if (!drawnColor.allOfOne) {\n    \tconsole.log(\"Detected more than one color.\")\n    }\n    if (drawnColor.color === -1) {\n    \tconsole.log(\"No color was drawn.\")\n    }*/\n\n\n    return newState;\n  } else {\n    //TODO: Think about what should happen here\n    throw new Error(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n  }\n}","map":{"version":3,"names":["tileColl","addArrays","drawTiles","state","payload","player","color","tiles","repo","middle","newState","drawn","filter","c","startingTile","Error","toString"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducerFunctions.js"],"sourcesContent":["import {tileColl, addArrays} from './utils.js'\n\nexport function drawTiles(state, payload) {\n\t\n\tconst player = payload.player;\n\tconst color = payload.color;\n\tconst tiles = payload.repo==='middle'\n\t? tileColl(state.middle[player])\n\t: state[payload.repo];\n\n\tconst newState = {...state};\n\n\tif (tiles[color] > 0) {\n\t\tnewState.drawn = tiles.filter(c => c===color);\n\t\tnewState[payload.repo] = [];\n\t\tif (payload.repo === 'middle') {\n\t\t\tif (state.startingTile === 'middle') {\n\t\t\t\tstate.startingTile = player;\n\t\t\t}\n\t\t} else {\n\t\t\tstate.middle = addArrays(state.middle, tiles.filter(c => c !== color));\n\t\t\t//tiles = Array(newState.nColors).fill(0);\n\t\t}\n\t\t/*let drawnColor = allOfOneColor(state[player].drawn);\n\t\tif (!drawnColor.allOfOne) {\n\t\t\tconsole.log(\"Detected more than one color.\")\n\t\t}\n\t\tif (drawnColor.color === -1) {\n\t\t\tconsole.log(\"No color was drawn.\")\n\t\t}*/\n\t\treturn newState;\n\t} else {\n\t\t//TODO: Think about what should happen here\n\t\tthrow new Error(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n\t}\n}"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,YAAlC;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;EAEzC,MAAMC,MAAM,GAAGD,OAAO,CAACC,MAAvB;EACA,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAtB;EACA,MAAMC,KAAK,GAAGH,OAAO,CAACI,IAAR,KAAe,QAAf,GACZR,QAAQ,CAACG,KAAK,CAACM,MAAN,CAAaJ,MAAb,CAAD,CADI,GAEZF,KAAK,CAACC,OAAO,CAACI,IAAT,CAFP;EAIA,MAAME,QAAQ,GAAG,EAAC,GAAGP;EAAJ,CAAjB;;EAEA,IAAII,KAAK,CAACD,KAAD,CAAL,GAAe,CAAnB,EAAsB;IACrBI,QAAQ,CAACC,KAAT,GAAiBJ,KAAK,CAACK,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAGP,KAAtB,CAAjB;IACAI,QAAQ,CAACN,OAAO,CAACI,IAAT,CAAR,GAAyB,EAAzB;;IACA,IAAIJ,OAAO,CAACI,IAAR,KAAiB,QAArB,EAA+B;MAC9B,IAAIL,KAAK,CAACW,YAAN,KAAuB,QAA3B,EAAqC;QACpCX,KAAK,CAACW,YAAN,GAAqBT,MAArB;MACA;IACD,CAJD,MAIO;MACNF,KAAK,CAACM,MAAN,GAAeR,SAAS,CAACE,KAAK,CAACM,MAAP,EAAeF,KAAK,CAACK,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAKP,KAAxB,CAAf,CAAxB,CADM,CAEN;IACA;IACD;AACF;AACA;AACA;AACA;AACA;AACA;;;IACE,OAAOI,QAAP;EACA,CAnBD,MAmBO;IACN;IACA,MAAM,IAAIK,KAAJ,CAAUX,OAAO,CAACI,IAAR,GAAe,6BAAf,GAA+CF,KAAK,CAACU,QAAN,EAA/C,GAAkE,GAA5E,CAAN;EACA;AACD"},"metadata":{},"sourceType":"module"}