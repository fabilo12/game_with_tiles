{"ast":null,"code":"var _jsxFileName = \"/home/lorenz/programming/azul_create_react_app/src/TileField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Context } from './Store.js';\nimport './TileField.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileField(props) {\n  _s();\n\n  /*\n  let type = props.type \n  ? (\n    props.type ==='starting-tile' \n    ? [props.type, 'middle-tile-field'].join(' ') \n    : props.type\n  ) \n  : 'tile-field';\n  let text = props.text ? props.text: '';\n  */\n  let type = props.type ? props.type : 'tile-field';\n  let row = props.row ? props.row : '';\n  let column = props.column ? props.column : '';\n  const state = useContext(Context);\n  let occcupState = props.tileColor > state[0].emptyTileField ? 'occupied tile-color-' + props.tileColor : 'empty';\n  return (\n    /*#__PURE__*/\n    //<button className={[type, row, column, occcupState].join(' ')}></button>\n    _jsxDEV(\"button\", {\n      className: [type, row, column, occcupState].join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(TileField, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\n_c = TileField;\nexport default TileField;\n\nvar _c;\n\n$RefreshReg$(_c, \"TileField\");","map":{"version":3,"names":["React","useContext","Context","TileField","props","type","row","column","state","occcupState","tileColor","emptyTileField","join"],"sources":["/home/lorenz/programming/azul_create_react_app/src/TileField.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport {Context} from './Store.js'\nimport './TileField.css';\n\n\nfunction TileField(props) {\n  /*\n  let type = props.type \n  ? (\n    props.type ==='starting-tile' \n    ? [props.type, 'middle-tile-field'].join(' ') \n    : props.type\n  ) \n  : 'tile-field';\n  let text = props.text ? props.text: '';\n  */\n  let type = props.type ? props.type : 'tile-field';\n  let row = props.row ? props.row : '';\n  let column = props.column ? props.column : '';\n  \n  const state = useContext(Context);\n  \n  let occcupState = props.tileColor>state[0].emptyTileField\n    ? 'occupied tile-color-' + props.tileColor\n    : 'empty';\n\n  return (\n    //<button className={[type, row, column, occcupState].join(' ')}></button>\n    <button className={[type, row, column, occcupState].join(' ')}></button>\n  )\n}\n\nexport default TileField"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAO,iBAAP;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAAA;;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,IAAI,GAAGD,KAAK,CAACC,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,YAArC;EACA,IAAIC,GAAG,GAAGF,KAAK,CAACE,GAAN,GAAYF,KAAK,CAACE,GAAlB,GAAwB,EAAlC;EACA,IAAIC,MAAM,GAAGH,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACG,MAArB,GAA8B,EAA3C;EAEA,MAAMC,KAAK,GAAGP,UAAU,CAACC,OAAD,CAAxB;EAEA,IAAIO,WAAW,GAAGL,KAAK,CAACM,SAAN,GAAgBF,KAAK,CAAC,CAAD,CAAL,CAASG,cAAzB,GACd,yBAAyBP,KAAK,CAACM,SADjB,GAEd,OAFJ;EAIA;IAAA;IACE;IACA;MAAQ,SAAS,EAAE,CAACL,IAAD,EAAOC,GAAP,EAAYC,MAAZ,EAAoBE,WAApB,EAAiCG,IAAjC,CAAsC,GAAtC;IAAnB;MAAA;MAAA;MAAA;IAAA;EAFF;AAID;;GAzBQT,S;;KAAAA,S;AA2BT,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}