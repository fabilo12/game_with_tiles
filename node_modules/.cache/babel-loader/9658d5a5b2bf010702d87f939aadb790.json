{"ast":null,"code":"var _jsxFileName = \"/home/lorenz/programming/azul_create_react_app/src/components/TileField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Context } from './Store.js';\nimport './TileField.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileField(props) {\n  _s();\n\n  const [state, dispatch] = useContext(Context);\n  console.log(typeof props.row);\n  const row = typeof props.row === 'undefined' ? '' : 'row' + props.row;\n  const column = typeof props.column === 'undefined' ? '' : 'column' + props.column;\n  const occupancy = props.tileColor === state.emptyTileField ? 'empty' : 'occupied tile-color-' + props.tileColor;\n  let callBack = {\n    type: ''\n  };\n\n  if (props.type === 'repo' && occupancy !== 'empty') {\n    callBack = {\n      type: 'SELECT_TILES',\n      payload: {\n        color: props.tileColor,\n        repo: props.repo\n      }\n    };\n  } else if (props.type === 'rows') {\n    callBack = {\n      type: 'PUT_TILES_INTO_ROW',\n      payload: {\n        row: props.row\n      }\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: ['tile-field', row, column, occupancy].join(' '),\n    onClick: () => dispatch(callBack)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TileField, \"R/iqDjZuP7G94n7Hryyh+IyzlJk=\");\n\n_c = TileField;\nexport default TileField;\n\nvar _c;\n\n$RefreshReg$(_c, \"TileField\");","map":{"version":3,"names":["React","useContext","Context","TileField","props","state","dispatch","console","log","row","column","occupancy","tileColor","emptyTileField","callBack","type","payload","color","repo","join"],"sources":["/home/lorenz/programming/azul_create_react_app/src/components/TileField.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport {Context} from './Store.js'\nimport './TileField.css';\n\n\nfunction TileField(props) {\n  \n  const [state, dispatch] = useContext(Context);\n  \n  console.log(typeof(props.row))\n  const row = typeof(props.row)==='undefined' ? '' : 'row' + props.row;\n  const column = typeof(props.column)==='undefined' ? '' : 'column' + props.column;\n  const occupancy = props.tileColor===state.emptyTileField\n  ? 'empty'\n  : 'occupied tile-color-' + props.tileColor;\n\n  let callBack = {type: ''};\n  if (props.type==='repo' && occupancy!=='empty') {\n    callBack = {\n      type: 'SELECT_TILES',\n      payload: {\n        color: props.tileColor,\n        repo: props.repo,\n      }\n    };\n  } else if (props.type==='rows') {\n    callBack = {\n      type: 'PUT_TILES_INTO_ROW',\n      payload: {\n        row: props.row,\n      }\n    };\n  }\n  \n\n  return (\n    <button \n    className={['tile-field', row, column, occupancy].join(' ')}\n    onClick={() => dispatch(callBack)}\n    ></button>\n  )\n}\n\nexport default TileField"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAO,iBAAP;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAAA;;EAExB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,UAAU,CAACC,OAAD,CAApC;EAEAK,OAAO,CAACC,GAAR,CAAY,OAAOJ,KAAK,CAACK,GAAzB;EACA,MAAMA,GAAG,GAAG,OAAOL,KAAK,CAACK,GAAb,KAAoB,WAApB,GAAkC,EAAlC,GAAuC,QAAQL,KAAK,CAACK,GAAjE;EACA,MAAMC,MAAM,GAAG,OAAON,KAAK,CAACM,MAAb,KAAuB,WAAvB,GAAqC,EAArC,GAA0C,WAAWN,KAAK,CAACM,MAA1E;EACA,MAAMC,SAAS,GAAGP,KAAK,CAACQ,SAAN,KAAkBP,KAAK,CAACQ,cAAxB,GAChB,OADgB,GAEhB,yBAAyBT,KAAK,CAACQ,SAFjC;EAIA,IAAIE,QAAQ,GAAG;IAACC,IAAI,EAAE;EAAP,CAAf;;EACA,IAAIX,KAAK,CAACW,IAAN,KAAa,MAAb,IAAuBJ,SAAS,KAAG,OAAvC,EAAgD;IAC9CG,QAAQ,GAAG;MACTC,IAAI,EAAE,cADG;MAETC,OAAO,EAAE;QACPC,KAAK,EAAEb,KAAK,CAACQ,SADN;QAEPM,IAAI,EAAEd,KAAK,CAACc;MAFL;IAFA,CAAX;EAOD,CARD,MAQO,IAAId,KAAK,CAACW,IAAN,KAAa,MAAjB,EAAyB;IAC9BD,QAAQ,GAAG;MACTC,IAAI,EAAE,oBADG;MAETC,OAAO,EAAE;QACPP,GAAG,EAAEL,KAAK,CAACK;MADJ;IAFA,CAAX;EAMD;;EAGD,oBACE;IACA,SAAS,EAAE,CAAC,YAAD,EAAeA,GAAf,EAAoBC,MAApB,EAA4BC,SAA5B,EAAuCQ,IAAvC,CAA4C,GAA5C,CADX;IAEA,OAAO,EAAE,MAAMb,QAAQ,CAACQ,QAAD;EAFvB;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GApCQX,S;;KAAAA,S;AAsCT,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}