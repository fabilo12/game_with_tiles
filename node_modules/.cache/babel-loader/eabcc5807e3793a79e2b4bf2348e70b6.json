{"ast":null,"code":"import addArrays from '../js_utils/addArrays.js';\nimport tileColToDist from '../azul_lib/tileColToDist.js'; //import finishRound from '../azul_lib/finishRound.js'\n\nexport default function putTilesIntoRow(state, payload) {\n  let newState = { ...state\n  };\n  const isValidRow = checkRowValidity(state, payload);\n\n  if (isValidRow) {\n    newState = processDrawnTiles(newState, payload);\n    newState = putRestToMiddle(newState);\n    newState = emptyRepo(newState);\n    newState = takeStartingTile(newState);\n    newState = deleteSelectedTiles(newState);\n    newState = goToNextPlayer(newState); //TODO: newState = finishRound(newState);\n  } else {\n    alert('Choose another row, please! Only empty rows or rows with tiles of the same color as the selected tile color are possible! If no row is possible, please click on a penalty button!');\n  }\n\n  return newState;\n}\n\nfunction checkRowValidity(state, payload) {\n  if (!payload.hasOwnProperty('row')) {\n    return true;\n  }\n\n  const rowIsEmpty = state.rows[state.playerAtTurn][payload.row][0] === state.emptyTileField;\n  const rowHasSameColor = state.rows[state.playerAtTurn][payload.row][0] === state.selectedTiles.color;\n  return rowIsEmpty || rowHasSameColor;\n}\n\nfunction processDrawnTiles(state, payload) {\n  const newState = { ...state\n  };\n  const drawn = newState.repos[newState.selectedTiles.repo].filter(el => el === newState.selectedTiles.color);\n  let targetRow;\n\n  if (!payload.hasOwnProperty('row')) {\n    targetRow = [];\n  } else {\n    targetRow = newState.rows[newState.playerAtTurn][payload.row];\n  }\n\n  const nTileInRow = targetRow.filter(el => el === drawn[0]).length;\n  const nDrawn = drawn.length;\n  const auxFilled = Array(Math.min(nTileInRow + nDrawn, targetRow.length)).fill(drawn[0]);\n  const auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n\n  if (payload.hasOwnProperty('row')) {\n    newState.rows[newState.playerAtTurn][payload.row] = auxFilled.concat(auxEmpty);\n  }\n\n  newState.penalties[newState.playerAtTurn] = addArrays(newState.penalties[newState.playerAtTurn], tileColToDist(Array(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), state.nColor));\n  return newState;\n}\n\nfunction putRestToMiddle(state) {\n  const newState = { ...state\n  };\n\n  if (newState.selectedTiles.repo !== newState.nRepos) {\n    const rest = newState.repos[newState.selectedTiles.repo].filter(el => el !== newState.selectedTiles.color);\n    newState.repos[newState.nRepos] = newState.repos.at(-1).concat(rest);\n  }\n\n  return newState;\n}\n\nfunction emptyRepo(state) {\n  const newState = { ...state\n  };\n\n  if (newState.selectedTiles.repo === newState.nRepos) {\n    //tiles taken from middle\n    newState.repos[newState.selectedTiles.repo] = newState.repos[newState.selectedTiles.repo].filter(el => el !== newState.selectedTiles.color);\n  } else {\n    newState.repos[newState.selectedTiles.repo] = Array(newState.tilesPerRepo).fill(newState.emptyTileField);\n  }\n\n  return newState;\n}\n\nfunction takeStartingTile(state) {\n  const newState = { ...state\n  };\n  const startingTileInMiddle = newState.startingTile === 'middle';\n  const drawnFromMiddle = newState.selectedTiles.repo === newState.nRepos;\n\n  if (startingTileInMiddle && drawnFromMiddle) {\n    newState.startingTile = 'player' + newState.playerAtTurn;\n  }\n\n  return newState;\n}\n\nfunction deleteSelectedTiles(state) {\n  const newState = { ...state\n  };\n  delete newState.selectedTiles;\n  return newState;\n}\n\nfunction goToNextPlayer(state) {\n  const newState = { ...state\n  };\n  newState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n  return newState;\n}","map":{"version":3,"names":["addArrays","tileColToDist","putTilesIntoRow","state","payload","newState","isValidRow","checkRowValidity","processDrawnTiles","putRestToMiddle","emptyRepo","takeStartingTile","deleteSelectedTiles","goToNextPlayer","alert","hasOwnProperty","rowIsEmpty","rows","playerAtTurn","row","emptyTileField","rowHasSameColor","selectedTiles","color","drawn","repos","repo","filter","el","targetRow","nTileInRow","length","nDrawn","auxFilled","Array","Math","min","fill","auxEmpty","concat","penalties","max","nColor","nRepos","rest","at","tilesPerRepo","startingTileInMiddle","startingTile","drawnFromMiddle","nPlayer"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducer/putTilesIntoRow.js"],"sourcesContent":["import addArrays from '../js_utils/addArrays.js'\nimport tileColToDist from '../azul_lib/tileColToDist.js'\n//import finishRound from '../azul_lib/finishRound.js'\n\nexport default function putTilesIntoRow(state, payload) {\n\n\tlet newState = { ...state };\n\n\tconst isValidRow = checkRowValidity(state, payload);\n\n\tif (isValidRow) {\n\t\tnewState = processDrawnTiles(newState, payload);\n\t\tnewState = putRestToMiddle(newState);\n\t\tnewState = emptyRepo(newState);\n\t\tnewState = takeStartingTile(newState);\n\t\tnewState = deleteSelectedTiles(newState);\n\t\tnewState = goToNextPlayer(newState);\n\t\t//TODO: newState = finishRound(newState);\n\t} else {\n\t\talert('Choose another row, please! Only empty rows or rows with tiles of the same color as the selected tile color are possible! If no row is possible, please click on a penalty button!')\n\t}\n\n\treturn newState\n}\n\nfunction checkRowValidity(state, payload) {\n\t\n\tif (!payload.hasOwnProperty('row')) {\n\t\treturn true\n\t}\n\tconst rowIsEmpty = (\n\t\tstate.rows[state.playerAtTurn][payload.row][0] === state.emptyTileField\n\t);\n\tconst rowHasSameColor = (\n\t\tstate.rows[state.playerAtTurn][payload.row][0] === state.selectedTiles.color\n\t);\n\n\treturn rowIsEmpty || rowHasSameColor\n}\n\nfunction processDrawnTiles(state, payload) {\n\n\tconst newState = { ...state };\n\n\tconst drawn = newState.repos[newState.selectedTiles.repo].filter(\n\t\tel => el === newState.selectedTiles.color\n\t);\n\tlet targetRow\n\tif (!payload.hasOwnProperty('row')) {\n\t\ttargetRow = [];\n\t} else {\n\t\ttargetRow = newState.rows[newState.playerAtTurn][payload.row];\n\t}\n\tconst nTileInRow = targetRow.filter(el => el === drawn[0]).length;\n\tconst nDrawn = drawn.length;\n\tconst auxFilled = Array(Math.min(nTileInRow + nDrawn, targetRow.length)).fill(drawn[0]);\n\tconst auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n\tif (payload.hasOwnProperty('row')) {\n\t\tnewState.rows[newState.playerAtTurn][payload.row] = auxFilled.concat(auxEmpty);\n\t}\n\tnewState.penalties[newState.playerAtTurn] = addArrays(\n\t\tnewState.penalties[newState.playerAtTurn],\n\t\ttileColToDist(\n\t\t\tArray(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), \n\t\t\tstate.nColor\n\t\t)\n\t);\n\n\treturn newState\n}\n\nfunction putRestToMiddle(state) {\n\n\tconst newState = { ...state };\n\n\tif (newState.selectedTiles.repo !== newState.nRepos) {\n\t\tconst rest = newState.repos[newState.selectedTiles.repo].filter(\n\t\t\tel => el!==newState.selectedTiles.color\n\t\t)\n\t\tnewState.repos[newState.nRepos] = newState.repos.at(-1).concat(rest);\n\t}\n\n\treturn newState\n}\n\nfunction emptyRepo(state) {\n\t\n\tconst newState = { ...state };\n\n\tif (newState.selectedTiles.repo === newState.nRepos) {//tiles taken from middle\n\t\tnewState.repos[newState.selectedTiles.repo] = \n\t\t\tnewState.repos[newState.selectedTiles.repo].filter(\n\t\t\t\tel => el!==newState.selectedTiles.color\n\t\t\t);\n\t} else {\n\t\tnewState.repos[newState.selectedTiles.repo] = \n\t\tArray(newState.tilesPerRepo).fill(newState.emptyTileField);\n\t}\n\t\n\treturn newState\n}\n\n\nfunction takeStartingTile(state) {\n\n\tconst newState = { ...state };\n\n\tconst startingTileInMiddle = (newState.startingTile === 'middle');\n\tconst drawnFromMiddle = (newState.selectedTiles.repo === newState.nRepos);\n\tif (startingTileInMiddle && drawnFromMiddle) {\n\t\tnewState.startingTile = 'player' + newState.playerAtTurn;\n\t}\n\n\treturn newState\n}\n\nfunction deleteSelectedTiles(state) {\n\n\tconst newState = { ...state };\n\n\tdelete newState.selectedTiles;\n\t\n\treturn newState\n}\n\nfunction goToNextPlayer(state) {\n\n\tconst newState = { ...state };\n\n\tnewState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n\n\treturn newState\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}