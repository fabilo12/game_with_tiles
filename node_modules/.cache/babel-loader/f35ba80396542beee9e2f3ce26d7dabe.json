{"ast":null,"code":"import getRandomInt from '../js_utils/getRandomInt.js';\nimport tileColSplitter from './tileColSplitter.js';\nexport default function fillRepos(state) {\n  const newState = { ...state\n  };\n\n  for (let i in newState.repos) {\n    let filled = newState.repos[i].filter(el => el !== this.emptyTileField).length === newState.tilesPerRepo;\n\n    while (!filled) {\n      const randId = getRandomInt(0, newState.bag.length, newState.tilesPerRepo - newState.repos[i].length);\n      const splittedBag = tileColSplitter(newState.bag, randId);\n      newState.repos[i] = splittedBag.drawn;\n      newState.bag = splittedBag.rest;\n      const bagHasEnoughTiles = newState.bag.length < newState.tilesPerRepo;\n\n      if (bagHasEnoughTiles) {\n        //bag\n        const mutatedProps = refillBag(newState);\n        newState.bag = mutatedProps.bag;\n        newState.usedTiles = mutatedProps.usedTiles;\n      } else {\n        filled = true;\n      }\n    }\n  }\n\n  return newState;\n}\n\nfunction refillBag(st) {\n  return {\n    bag: st.usedTiles,\n    usedTiles: []\n  };\n}","map":{"version":3,"names":["getRandomInt","tileColSplitter","fillRepos","state","newState","i","repos","filled","filter","el","emptyTileField","length","tilesPerRepo","randId","bag","splittedBag","drawn","rest","bagHasEnoughTiles","mutatedProps","refillBag","usedTiles","st"],"sources":["/home/lorenz/programming/azul_create_react_app/src/azul_lib/fillRepos.js"],"sourcesContent":["import getRandomInt from '../js_utils/getRandomInt.js'\nimport tileColSplitter from './tileColSplitter.js'\n\nexport default function fillRepos(state) {\n\n\tconst newState = { ...state };\n\n\tfor (let i in newState.repos) {\n\t\tlet filled = (\n\t\t\tnewState.repos[i].filter(el => el !== this.emptyTileField).length\n\t\t\t===\n\t\t\tnewState.tilesPerRepo\n\t\t\t);\n\t\twhile (!filled) {\n\t\t\tconst randId = getRandomInt(\n\t\t\t\t0,\n\t\t\t\tnewState.bag.length,\n\t\t\t\tnewState.tilesPerRepo - newState.repos[i].length\n\t\t\t);\n\t\t\tconst splittedBag = tileColSplitter(newState.bag, randId);\n\t\t\tnewState.repos[i] = splittedBag.drawn;\n\t\t\tnewState.bag = splittedBag.rest;\n\t\t\tconst bagHasEnoughTiles = (newState.bag.length < newState.tilesPerRepo);\n\t\t\tif (bagHasEnoughTiles) {//bag\n\t\t\t\tconst mutatedProps = refillBag(newState);\n\t\t\t\tnewState.bag = mutatedProps.bag;\n\t\t\t\tnewState.usedTiles = mutatedProps.usedTiles;\n\t\t\t} else {\n\t\t\t\tfilled = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newState\n}\n\nfunction refillBag(st) {\n\treturn (\n\t\t{\n\t\t\tbag: st.usedTiles,\n\t\t\tusedTiles: [],\n\t\t}\n\t)\n}"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,6BAAzB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAExC,MAAMC,QAAQ,GAAG,EAAE,GAAGD;EAAL,CAAjB;;EAEA,KAAK,IAAIE,CAAT,IAAcD,QAAQ,CAACE,KAAvB,EAA8B;IAC7B,IAAIC,MAAM,GACTH,QAAQ,CAACE,KAAT,CAAeD,CAAf,EAAkBG,MAAlB,CAAyBC,EAAE,IAAIA,EAAE,KAAK,KAAKC,cAA3C,EAA2DC,MAA3D,KAEAP,QAAQ,CAACQ,YAHV;;IAKA,OAAO,CAACL,MAAR,EAAgB;MACf,MAAMM,MAAM,GAAGb,YAAY,CAC1B,CAD0B,EAE1BI,QAAQ,CAACU,GAAT,CAAaH,MAFa,EAG1BP,QAAQ,CAACQ,YAAT,GAAwBR,QAAQ,CAACE,KAAT,CAAeD,CAAf,EAAkBM,MAHhB,CAA3B;MAKA,MAAMI,WAAW,GAAGd,eAAe,CAACG,QAAQ,CAACU,GAAV,EAAeD,MAAf,CAAnC;MACAT,QAAQ,CAACE,KAAT,CAAeD,CAAf,IAAoBU,WAAW,CAACC,KAAhC;MACAZ,QAAQ,CAACU,GAAT,GAAeC,WAAW,CAACE,IAA3B;MACA,MAAMC,iBAAiB,GAAId,QAAQ,CAACU,GAAT,CAAaH,MAAb,GAAsBP,QAAQ,CAACQ,YAA1D;;MACA,IAAIM,iBAAJ,EAAuB;QAAC;QACvB,MAAMC,YAAY,GAAGC,SAAS,CAAChB,QAAD,CAA9B;QACAA,QAAQ,CAACU,GAAT,GAAeK,YAAY,CAACL,GAA5B;QACAV,QAAQ,CAACiB,SAAT,GAAqBF,YAAY,CAACE,SAAlC;MACA,CAJD,MAIO;QACNd,MAAM,GAAG,IAAT;MACA;IACD;EACD;;EAED,OAAOH,QAAP;AACA;;AAED,SAASgB,SAAT,CAAmBE,EAAnB,EAAuB;EACtB,OACC;IACCR,GAAG,EAAEQ,EAAE,CAACD,SADT;IAECA,SAAS,EAAE;EAFZ,CADD;AAMA"},"metadata":{},"sourceType":"module"}