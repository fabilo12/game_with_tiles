{"ast":null,"code":"import addArrays from '../js_utils/addArrays.js';\nimport tileColToDist from '../azul_lib/tileColToDist.js';\nimport tileDistToCol from '../azul_lib/tileDistToCol.js';\nexport default function selectTiles(state, payload) {\n  const color = payload.color;\n  const tiles = payload.repo === 'middle' ? tileDistToCol(state.middle) : state.repos[payload.repo];\n  const newState = { ...state\n  };\n  newState.drawn = tiles.filter(c => c === color);\n}\n/*if (newState.drawn.length > 0) {\n\tif (payload.repo === 'middle') {\n\t\tnewState[payload.repo] = Array(newState.nColors).fill(0);\n\t\tif (newState.startingTile === 'middle') {\n\t\t\tnewState.startingTile = newState.playerAtTurn;\n\t\t}\n\t} else {\n\t\tnewState.middle = addArrays(newState.middle, tileColToDist(tiles.filter(c => c !== color)));\n\t\tnewState[payload.repo] = [];\n\t}\n\treturn newState;\n} else {\n\talert(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n}*/","map":{"version":3,"names":["addArrays","tileColToDist","tileDistToCol","selectTiles","state","payload","color","tiles","repo","middle","repos","newState","drawn","filter","c"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducer/selectTiles.js"],"sourcesContent":["import addArrays from '../js_utils/addArrays.js'\nimport tileColToDist from '../azul_lib/tileColToDist.js'\nimport tileDistToCol from '../azul_lib/tileDistToCol.js'\n\nexport default function selectTiles(state, payload) {\n\n\tconst color = payload.color;\n\tconst tiles = (payload.repo === 'middle')\n\t\t? tileDistToCol(state.middle)\n\t\t: state.repos[payload.repo];\n\n\tconst newState = { ...state };\n\n\tnewState.drawn = tiles.filter(c => c === color);\n\n\t\n}\n\n\n/*if (newState.drawn.length > 0) {\n\tif (payload.repo === 'middle') {\n\t\tnewState[payload.repo] = Array(newState.nColors).fill(0);\n\t\tif (newState.startingTile === 'middle') {\n\t\t\tnewState.startingTile = newState.playerAtTurn;\n\t\t}\n\t} else {\n\t\tnewState.middle = addArrays(newState.middle, tileColToDist(tiles.filter(c => c !== color)));\n\t\tnewState[payload.repo] = [];\n\t}\n\treturn newState;\n} else {\n\talert(payload.repo + \" contains no tile of color \" + color.toString() + \"!\");\n}*/"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,OAA5B,EAAqC;EAEnD,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAtB;EACA,MAAMC,KAAK,GAAIF,OAAO,CAACG,IAAR,KAAiB,QAAlB,GACXN,aAAa,CAACE,KAAK,CAACK,MAAP,CADF,GAEXL,KAAK,CAACM,KAAN,CAAYL,OAAO,CAACG,IAApB,CAFH;EAIA,MAAMG,QAAQ,GAAG,EAAE,GAAGP;EAAL,CAAjB;EAEAO,QAAQ,CAACC,KAAT,GAAiBL,KAAK,CAACM,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAKR,KAAxB,CAAjB;AAGA;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}