{"ast":null,"code":"var _jsxFileName = \"/home/lorenz/programming/azul_create_react_app/src/components/TileField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Context } from './Store.js';\nimport './TileField.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileField(props) {\n  _s();\n\n  const state = useContext(Context);\n  const row = typeof props.row === 'undefined' ? '' : 'row' + props.row;\n  const column = typeof props.column === 'undefined' ? '' : 'column' + props.column;\n  const occupancy = props.tileColor === state[0].emptyTileField ? 'empty' : 'occupied tile-color-' + props.tileColor;\n  let callBack = {\n    type: ''\n  };\n\n  if (props.type === 'repo' && occupancy !== 'empty') {\n    callBack = {\n      type: 'SELECT_TILES',\n      payload: {\n        color: props.tileColor,\n        repo: props.repo\n      }\n    };\n  } else if (props.type === 'rows') {\n    callBack = {\n      type: 'PUT_TILES_INTO_ROW',\n      payload: {\n        row: props.row\n      }\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: ['tile-field', row, column, occupancy].join(' '),\n    onClick: () => dispatch(callBack)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TileField, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\n_c = TileField;\nexport default TileField;\n\nvar _c;\n\n$RefreshReg$(_c, \"TileField\");","map":{"version":3,"names":["React","useContext","Context","TileField","props","state","row","column","occupancy","tileColor","emptyTileField","callBack","type","payload","color","repo","join","dispatch"],"sources":["/home/lorenz/programming/azul_create_react_app/src/components/TileField.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport {Context} from './Store.js'\nimport './TileField.css';\n\n\nfunction TileField(props) {\n  \n  const state = useContext(Context);\n  \n  const row = typeof(props.row)==='undefined' ? '' : 'row' + props.row;\n  const column = typeof(props.column)==='undefined' ? '' : 'column' + props.column;\n  const occupancy = props.tileColor===state[0].emptyTileField\n  ? 'empty'\n  : 'occupied tile-color-' + props.tileColor;\n\n  let callBack = {type: ''};\n  if (props.type==='repo' && occupancy!=='empty') {\n    callBack = {\n      type: 'SELECT_TILES',\n      payload: {\n        color: props.tileColor,\n        repo: props.repo,\n      }\n    };\n  } else if (props.type==='rows') {\n    callBack = {\n      type: 'PUT_TILES_INTO_ROW',\n      payload: {\n        row: props.row,\n      }\n    };\n  }\n  \n\n  return (\n    <button \n    className={['tile-field', row, column, occupancy].join(' ')}\n    onClick={() => dispatch(callBack)}\n    ></button>\n  )\n}\n\nexport default TileField"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAO,iBAAP;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAAA;;EAExB,MAAMC,KAAK,GAAGJ,UAAU,CAACC,OAAD,CAAxB;EAEA,MAAMI,GAAG,GAAG,OAAOF,KAAK,CAACE,GAAb,KAAoB,WAApB,GAAkC,EAAlC,GAAuC,QAAQF,KAAK,CAACE,GAAjE;EACA,MAAMC,MAAM,GAAG,OAAOH,KAAK,CAACG,MAAb,KAAuB,WAAvB,GAAqC,EAArC,GAA0C,WAAWH,KAAK,CAACG,MAA1E;EACA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,SAAN,KAAkBJ,KAAK,CAAC,CAAD,CAAL,CAASK,cAA3B,GAChB,OADgB,GAEhB,yBAAyBN,KAAK,CAACK,SAFjC;EAIA,IAAIE,QAAQ,GAAG;IAACC,IAAI,EAAE;EAAP,CAAf;;EACA,IAAIR,KAAK,CAACQ,IAAN,KAAa,MAAb,IAAuBJ,SAAS,KAAG,OAAvC,EAAgD;IAC9CG,QAAQ,GAAG;MACTC,IAAI,EAAE,cADG;MAETC,OAAO,EAAE;QACPC,KAAK,EAAEV,KAAK,CAACK,SADN;QAEPM,IAAI,EAAEX,KAAK,CAACW;MAFL;IAFA,CAAX;EAOD,CARD,MAQO,IAAIX,KAAK,CAACQ,IAAN,KAAa,MAAjB,EAAyB;IAC9BD,QAAQ,GAAG;MACTC,IAAI,EAAE,oBADG;MAETC,OAAO,EAAE;QACPP,GAAG,EAAEF,KAAK,CAACE;MADJ;IAFA,CAAX;EAMD;;EAGD,oBACE;IACA,SAAS,EAAE,CAAC,YAAD,EAAeA,GAAf,EAAoBC,MAApB,EAA4BC,SAA5B,EAAuCQ,IAAvC,CAA4C,GAA5C,CADX;IAEA,OAAO,EAAE,MAAMC,QAAQ,CAACN,QAAD;EAFvB;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GAnCQR,S;;KAAAA,S;AAqCT,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}