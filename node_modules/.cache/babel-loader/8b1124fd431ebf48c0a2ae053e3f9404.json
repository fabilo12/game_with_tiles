{"ast":null,"code":"import addArrays from '../js_utils/addArrays.js';\nimport tileColToDist from '../azul_lib/tileColToDist.js';\nexport default function putTilesIntoRow(state, payload) {\n  let newState = { ...state\n  };\n  /*const drawn = newState.repos[newState.selectedTiles.repo].filter(\n  \tel => el===newState.selectedTiles.color\n  );\n  const rest = tileColToDist(\n  \tnewState.repos[newState.selectedTiles.repo].filter(\n  \t\tel => el!==newState.selectedTiles.color\n  \t), \n  \tnewState.nColor\n  );*/\n  //const targetRow = newState.rows[newState.playerAtTurn][payload.row];\n  //const newTargetRow = processDrawnTiles(newState, drawn, targetRow);\n\n  newState = processDrawnTiles(newState, drawn, targetRow);\n  /*newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n  newState.penalties[newState.playerAtTurn] = addArrays(\n  \tnewState.penalties[newState.playerAtTurn],\n  \tnewTargetRow.penalties\n  );*/\n  //newState.middle = addArrays(newState.middle, rest);\n\n  newState = putRestToMiddle(newState);\n  /*newState.repos[newState.selectedTiles.repo] = \n  \tArray(newState.tilesPerRepo).fill(newState.emptyTileField);*/\n\n  newState = emptyRepo(newState);\n  newState = deleteSelectedTiles(newState);\n  newState = goToNextPlayer(newState);\n  return newState;\n}\n\nfunction processDrawnTiles(state, payload) {\n  const newState = { ...state\n  };\n  const drawn = newState.repos[newState.selectedTiles.repo].filter(el => el === newState.selectedTiles.color);\n  const targetRow = newState.rows[newState.playerAtTurn][payload.row];\n  const nTileInRow = targetRow.filter(el => el === drawn[0]).length;\n  const nDrawn = drawn.length;\n  const auxFilled = Array(Math.min(nTileInRow + nDrawn, targetRow.length)).fill(drawn[0]);\n  const auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n  return {\n    newRow: auxFilled.concat(auxEmpty),\n    penalties: tileColToDist(Array(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), state.nColor)\n  };\n  newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n  newState.penalties[newState.playerAtTurn] = addArrays(newState.penalties[newState.playerAtTurn], newTargetRow.penalties);\n  return newState;\n}\n\nfunction putRestToMiddle(state) {\n  const newState = { ...state\n  };\n  const rest = tileColToDist(newState.repos[newState.selectedTiles.repo].filter(el => el !== newState.selectedTiles.color), newState.nColor);\n  newState.middle = addArrays(newState.middle, rest);\n  return newState;\n}\n\nfunction emptyRepo(state) {\n  const newState = { ...state\n  };\n  newState.repos[newState.selectedTiles.repo] = Array(newState.tilesPerRepo).fill(newState.emptyTileField);\n  return newState;\n}\n\nfunction deleteSelectedTiles(state) {\n  const newState = { ...state\n  };\n  delete newState.selectedTiles;\n  return newState;\n}\n\nfunction goToNextPlayer(state) {\n  const newState = { ...state\n  };\n  newState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n  return newState;\n}","map":{"version":3,"names":["addArrays","tileColToDist","putTilesIntoRow","state","payload","newState","processDrawnTiles","drawn","targetRow","putRestToMiddle","emptyRepo","deleteSelectedTiles","goToNextPlayer","repos","selectedTiles","repo","filter","el","color","rows","playerAtTurn","row","nTileInRow","length","nDrawn","auxFilled","Array","Math","min","fill","auxEmpty","emptyTileField","newRow","concat","penalties","max","nColor","newTargetRow","rest","middle","tilesPerRepo","nPlayer"],"sources":["/home/lorenz/programming/azul_create_react_app/src/reducer/putTilesIntoRow.js"],"sourcesContent":["import addArrays from '../js_utils/addArrays.js'\nimport tileColToDist from '../azul_lib/tileColToDist.js'\n\nexport default function putTilesIntoRow(state, payload) {\n\n\tlet newState = { ...state };\n\n\t/*const drawn = newState.repos[newState.selectedTiles.repo].filter(\n\t\tel => el===newState.selectedTiles.color\n\t);\n\tconst rest = tileColToDist(\n\t\tnewState.repos[newState.selectedTiles.repo].filter(\n\t\t\tel => el!==newState.selectedTiles.color\n\t\t), \n\t\tnewState.nColor\n\t);*/\n\t//const targetRow = newState.rows[newState.playerAtTurn][payload.row];\n\n\t//const newTargetRow = processDrawnTiles(newState, drawn, targetRow);\n\tnewState = processDrawnTiles(newState, drawn, targetRow);\n\t\n\t/*newState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n\tnewState.penalties[newState.playerAtTurn] = addArrays(\n\t\tnewState.penalties[newState.playerAtTurn],\n\t\tnewTargetRow.penalties\n\t);*/\n\t\n\t//newState.middle = addArrays(newState.middle, rest);\n\tnewState = putRestToMiddle(newState);\n\t/*newState.repos[newState.selectedTiles.repo] = \n\t\tArray(newState.tilesPerRepo).fill(newState.emptyTileField);*/\n\tnewState = emptyRepo(newState);\n\n\tnewState = deleteSelectedTiles(newState);\n\n\tnewState = goToNextPlayer(newState);\n\n\treturn newState\n}\n\nfunction processDrawnTiles(state, payload) {\n\n\tconst newState = { ...state };\n\n\tconst drawn = newState.repos[newState.selectedTiles.repo].filter(\n\t\tel => el===newState.selectedTiles.color\n\t);\n\tconst targetRow = newState.rows[newState.playerAtTurn][payload.row];\n\tconst nTileInRow = targetRow.filter(el => el===drawn[0]).length;\n\tconst nDrawn = drawn.length;\n\tconst auxFilled = Array(Math.min(nTileInRow + nDrawn,targetRow.length)).fill(drawn[0]);\n\tconst auxEmpty = Array(targetRow.length - auxFilled.length).fill(state.emptyTileField);\n\treturn {\n\t\tnewRow: auxFilled.concat(auxEmpty),\n\t\tpenalties: tileColToDist(\n\t\t\tArray(Math.max(0, nDrawn - (targetRow.length - nTileInRow))).fill(drawn[0]), \n\t\t\tstate.nColor\n\t\t\t),\n\t}\n\n\tnewState.rows[newState.playerAtTurn][payload.row] = newTargetRow.newRow;\n\tnewState.penalties[newState.playerAtTurn] = addArrays(\n\t\tnewState.penalties[newState.playerAtTurn],\n\t\tnewTargetRow.penalties\n\t);\n\n\treturn newState\n}\n\nfunction putRestToMiddle(state) {\n\n\tconst newState = { ...state };\n\n\tconst rest = tileColToDist(\n\t\tnewState.repos[newState.selectedTiles.repo].filter(\n\t\t\tel => el!==newState.selectedTiles.color\n\t\t), \n\t\tnewState.nColor\n\t);\n\tnewState.middle = addArrays(newState.middle, rest);\n\n\treturn newState\n}\n\nfunction emptyRepo(state) {\n\t\n\tconst newState = { ...state };\n\n\tnewState.repos[newState.selectedTiles.repo] = \n\t\tArray(newState.tilesPerRepo).fill(newState.emptyTileField);\n\t\n\treturn newState\n}\n\nfunction deleteSelectedTiles(state) {\n\n\tconst newState = { ...state };\n\n\tdelete newState.selectedTiles;\n\t\n\treturn newState\n}\n\nfunction goToNextPlayer(state) {\n\n\tconst newState = { ...state };\n\n\tnewState.playerAtTurn = (newState.playerAtTurn + 1) % newState.nPlayer;\n\n\treturn newState\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}